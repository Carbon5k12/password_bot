import os
import logging
import sys
import telebot
from telebot import types
from xkcdpass import xkcd_password
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")
    sys.exit(1)

class XKCDPasswordGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π –≤ —Å—Ç–∏–ª–µ XKCD"""
    DELIMITERS_NUMBERS = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
    DELIMITERS_FULL = ["!", "$", "%", "^", "&", "*", "-", "_", "+", "=",
                      ":", "|", "~", "?", "/", ".", ";"] + DELIMITERS_NUMBERS

    def __init__(self, filename: str = "wordlist.txt"):
        try:
            self.wordlist = xkcd_password.generate_wordlist(
                wordfile=filename,
                valid_chars="[a-z]",
                min_length=4,
                max_length=10,
            )
        except Exception as error:
            logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ wordlist: %s", error)
            raise

    def generate(self, complexity: str = "normal") -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        try:
            if complexity == "weak":
                return xkcd_password.generate_xkcdpassword(
                    self.wordlist,
                    numwords=2,
                    delimiter=""
                )
            if complexity == "normal":
                return xkcd_password.generate_xkcdpassword(
                    self.wordlist,
                    numwords=3,
                    case="random",
                    random_delimiters=True,
                    valid_delimiters=self.DELIMITERS_NUMBERS
                )
            if complexity == "strong":
                return xkcd_password.generate_xkcdpassword(
                    self.wordlist,
                    numwords=4,
                    case="random",
                    random_delimiters=True,
                    valid_delimiters=self.DELIMITERS_FULL
                )
            return ""
        except Exception as error:
            logger.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è: %s", error)
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è"

class PasswordBot:
    """Telegram –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π"""
    def __init__(self, token: str):
        self.bot = telebot.TeleBot(token)
        try:
            self.generator = XKCDPasswordGenerator()
        except Exception as error:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π: %s", error)
            raise
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        @self.bot.message_handler(commands=['start', 'help'])
        def start_handler(message):
            self.send_welcome(message)

        @self.bot.message_handler(commands=['password', 'generate'])
        def password_handler(message):
            self.send_password_options(message)

        @self.bot.callback_query_handler(func=lambda call: True)
        def callback_handler(call):
            self.handle_password_generation(call)

    def send_welcome(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        markup = types.InlineKeyboardMarkup()
        btn_generate = types.InlineKeyboardButton(
            "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å", 
            callback_data="generate"
        )
        markup.add(btn_generate)

        welcome_text = (
            "üîê *–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä XKCD-–ø–∞—Ä–æ–ª–µ–π*\n\n"
            "–Ø —Å–æ–∑–¥–∞—é –ª–µ–≥–∫–æ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–µ—Å—è, –Ω–æ –Ω–∞–¥–µ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏.\n\n"
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/password - –í—ã–±—Ä–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )

        try:
            self.bot.send_message(
                message.chat.id,
                welcome_text,
                parse_mode='Markdown',
                reply_markup=markup
            )
        except Exception as error:
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: %s", error)

    def send_password_options(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è"""
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_weak = types.InlineKeyboardButton("–°–ª–∞–±—ã–π", callback_data="weak")
        btn_normal = types.InlineKeyboardButton("–û–±—ã—á–Ω—ã–π", callback_data="normal")
        btn_strong = types.InlineKeyboardButton("–°–ª–æ–∂–Ω—ã–π", callback_data="strong")
        markup.add(btn_weak, btn_normal, btn_strong)

        try:
            self.bot.send_message(
                message.chat.id,
                "üîí –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è:",
                reply_markup=markup
            )
        except Exception as error:
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–∞—Ä–æ–ª—è: %s", error)

    def handle_password_generation(self, call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è"""
        try:
            complexity = call.data
            if complexity in ["weak", "normal", "strong"]:
                password = self.generator.generate(complexity)
                complexity_name = {
                    "weak": "üîì –°–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å",
                    "normal": "üîê –û–±—ã—á–Ω—ã–π –ø–∞—Ä–æ–ª—å",
                    "strong": "üîí –°–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å"
                }[complexity]

                response = (
                    f"{complexity_name}:\n`{password}`\n\n"
                    "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!"
                )
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=response,
                    parse_mode='Markdown'
                )
            if complexity == "generate":
                self.send_password_options(call.message)
        except Exception as error:
            logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: %s", error)
            self.bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è",
                show_alert=True
            )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        try:
            self.bot.polling(none_stop=True, interval=0)
        except Exception as error:
            logger.error("–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: %s", error)
            raise

if __name__ == '__main__':
    try:
        bot = PasswordBot(TOKEN)
        bot.run()
    except Exception as error:
        logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %s", error)
        sys.exit(1)
